## Part 1: Setting Up GitHub Actions with macOS Runners

### Step 1: Prepare Your Repository Structure

Your repository should have this structure:

```
your-app/
├── .github/
│   └── workflows/
│       └── ios-deploy.yml
├── ios/
│   ├── YourApp.xcodeproj (or .xcworkspace)
│   ├── YourApp/
│   └── Podfile (if using CocoaPods)
└── other files...
```

### Step 2: Create the Workflow Directory

1. In your GitHub repository, create a `.github` folder in the root
1. Inside `.github`, create a `workflows` folder
1. This is where your automation files will live

## Part 2: Generate App Store Connect API Key

### Step 1: Access App Store Connect

1. Go to [appstoreconnect.apple.com](https://appstoreconnect.apple.com)
1. Sign in with your Apple Developer account

### Step 2: Navigate to API Keys

1. Click on your name/profile in the top right
1. Select “Keys” from the dropdown menu
1. Click the “Users and Access” tab if not already selected
1. Click on “Keys” in the left sidebar

### Step 3: Generate the API Key

1. Click the “+” button or “Generate API Key”
1. Give it a name (e.g., “GitHub Actions Deploy Key”)
1. Select access level: “App Manager” or “Developer” (App Manager recommended)
1. Click “Generate”

### Step 4: Download and Save Key Information

1. **Download the .p8 file** - This can only be downloaded ONCE, so save it securely
1. **Copy the Key ID** - You’ll see this in the keys list (format: ABC123DEF4)
1. **Copy the Issuer ID** - Found at the top of the Keys page (format: 12345678-1234-1234-1234-123456789012)

## Part 3: Add Secrets to GitHub Repository

### Step 1: Access Repository Settings

1. Go to your GitHub repository
1. Click on “Settings” tab
1. In the left sidebar, click “Secrets and variables”
1. Click “Actions”

### Step 2: Add Required Secrets

Click “New repository secret” for each of these:

**SECRET 1: APP_STORE_CONNECT_API_KEY**

- Name: `APP_STORE_CONNECT_API_KEY`
- Value: Open the .p8 file you downloaded in a text editor, copy the entire contents (including the BEGIN/END lines)

**SECRET 2: APP_STORE_CONNECT_API_KEY_ID**

- Name: `APP_STORE_CONNECT_API_KEY_ID`
- Value: The Key ID you copied (e.g., ABC123DEF4)

**SECRET 3: APP_STORE_CONNECT_ISSUER_ID**

- Name: `APP_STORE_CONNECT_ISSUER_ID`
- Value: The Issuer ID you copied

**SECRET 4: KEYCHAIN_PASSWORD**

- Name: `KEYCHAIN_PASSWORD`
- Value: Create a strong password (this is for the temporary keychain)

### Step 3: Add App-Specific Secrets

**SECRET 5: BUNDLE_ID**

- Name: `BUNDLE_ID`
- Value: Your app’s bundle identifier (e.g., com.yourcompany.yourapp)

## Part 4: Create the GitHub Actions Workflow

### Step 1: Create the Workflow File

In your `.github/workflows/` folder, create a file called `ios-deploy.yml`:​​​​​​​​​​​​​​​​

### Step 2: Customize the Workflow

You’ll need to modify several parts of this workflow for your specific app:

1. **Replace `YourApp`** with your actual app name
1. **Add your Team ID** - Find this in your Apple Developer account
1. **Update the workspace/project path** based on your project structure
1. **Adjust the scheme name** to match your Xcode scheme

### Step 3: Find Your Team ID

1. Go to [developer.apple.com](https://developer.apple.com)
1. Sign in and go to “Account”
1. Look for “Team ID” in the membership section
1. Add this to the ExportOptions.plist section in the workflow

## Part 5: Alternative with Fastlane (Recommended)

Fastlane is easier to configure and more robust. Here’s how to set it up:

### Step 1: Install Fastlane

Add this to your workflow instead of the complex build steps:​​​​​​​​​​​​​​​​

### Step 2: Configure Fastlane

You’ll also need to create a `Fastfile` in your `ios/fastlane/` directory:​​​​​​​​​​​​​​​​

## Part 6: Testing and Deployment

### Step 1: Test the Workflow

1. Commit and push your changes to GitHub
1. Go to your repository’s “Actions” tab
1. You should see your workflow running
1. Click on it to monitor progress

### Step 2: Manual Trigger

You can also trigger the workflow manually:

1. Go to Actions tab
1. Click on your workflow name
1. Click “Run workflow”
1. Select the branch and click “Run workflow”

## Important Notes:

1. **Replace all placeholder values** (YourApp, scheme names, etc.) with your actual values
1. **The first run might fail** while you work out configuration issues - this is normal
1. **Start with TestFlight** (beta lane) before trying App Store deployment
1. **Check your provisioning profiles** are set up correctly in your Apple Developer account
1. **The API key file can only be downloaded once** - keep it safe!

This setup will allow you to deploy to the App Store without needing Xcode on your local machine. The GitHub Actions runner will handle all the building and uploading for you.

Would you like me to help you customize any of these files for your specific app configuration?​​​​​​​​​​​​​​​​





default_platform(:ios)

platform :ios do
desc “Build and upload to TestFlight”
lane :beta do
# Get certificates and provisioning profiles
get_certificates
get_provisioning_profile

```
# Build the app
build_app(
  workspace: "YourApp.xcworkspace",
  scheme: "YourApp",
  configuration: "Release",
  export_method: "app-store"
)

# Upload to TestFlight
upload_to_testflight(
  api_key_path: ENV["APP_STORE_CONNECT_API_KEY_PATH"],
  skip_waiting_for_build_processing: true
)
```

end

desc “Build and upload to App Store”
lane :release do
# Get certificates and provisioning profiles
get_certificates
get_provisioning_profile

```
# Build the app
build_app(
  workspace: "YourApp.xcworkspace",
  scheme: "YourApp",
  configuration: "Release",
  export_method: "app-store"
)

# Upload to App Store
upload_to_app_store(
  api_key_path: ENV["APP_STORE_CONNECT_API_KEY_PATH"],
  skip_metadata: true,
  skip_screenshots: true,
  force: true
)
```